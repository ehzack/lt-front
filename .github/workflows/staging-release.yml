name: Staging Release

on:
  workflow_run:
    workflows: ["Staging Versioning"]
    types:
      - completed
    branches:
      - staging

permissions:
  contents: write
  packages: write

jobs:
  build-and-deploy-staging:
    name: Build and Deploy Staging
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    strategy:
      matrix:
        node-version: [22.14.0]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Verify Go installation
        run: |
          echo "üîç Verifying Go installation..."
          go version
          echo "‚úÖ Go is ready"

      - name: Enable Corepack
        run: corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Restore yarn cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Run tests
        run: yarn test --coverage --watchAll=false --passWithNoTests
        env:
          CI: true

      - name: Build React application for staging
        run: yarn build
        env:
          GENERATE_SOURCEMAP: true
          CI: false
          REACT_APP_VERSION: ${{ steps.version.outputs.version }}
          REACT_APP_ENVIRONMENT: staging

      - name: Build Windows executable with embedded React app (staging)
        run: |
          echo "üî® Building staging Windows executable with embedded React app..."
          GOOS=windows GOARCH=amd64 go build \
            -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \
            -o lt-frontend-${{ steps.version.outputs.version }}-staging-windows.exe server.go
          echo "‚úÖ Staging Windows executable built: lt-frontend-${{ steps.version.outputs.version }}-staging-windows.exe"
        env:
          APP_VERSION: ${{ steps.version.outputs.version }}

      - name: Create staging build archive
        run: |
          cd build
          tar -czf ../react-app-staging-${{ steps.version.outputs.version }}.tar.gz *
          cd ..
          zip -r react-app-staging-${{ steps.version.outputs.version }}.zip build/

      - name: Generate staging build info
        run: |
          cat > staging-build-info.json << EOF
          {
            "version": "${{ steps.version.outputs.version }}",
            "buildDate": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commitSha": "${{ github.sha }}",
            "branch": "staging",
            "environment": "staging",
            "nodeVersion": "${{ matrix.node-version }}",
            "workflowRun": "${{ github.event.workflow_run.id }}"
          }
          EOF

      - name: Upload staging artifacts
        uses: actions/upload-artifact@v4
        with:
          name: staging-build-${{ steps.version.outputs.version }}
          path: |
            build/
            react-app-staging-${{ steps.version.outputs.version }}.tar.gz
            react-app-staging-${{ steps.version.outputs.version }}.zip
            lt-frontend-${{ steps.version.outputs.version }}-staging-windows.exe
            staging-build-info.json
          retention-days: 30

      - name: Find latest staging tag
        id: latest-tag
        run: |
          LATEST_TAG=$(git tag -l "v*-staging.*" --sort=-version:refname | head -n1)
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest staging tag: $LATEST_TAG"

      - name: Update staging release with artifacts
        if: steps.latest-tag.outputs.tag != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.latest-tag.outputs.tag }}
          name: Staging Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: true
          files: |
            react-app-staging-${{ steps.version.outputs.version }}.tar.gz
            react-app-staging-${{ steps.version.outputs.version }}.zip
            lt-frontend-${{ steps.version.outputs.version }}-staging-windows.exe
            staging-build-info.json
          body: |
            ## Staging Release ${{ steps.version.outputs.version }}

            This is an automated staging release with build artifacts.

            ### Build Information
            - **Version:** ${{ steps.version.outputs.version }}
            - **Build Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
            - **Commit:** ${{ github.sha }}
            - **Branch:** staging
            - **Node.js Version:** ${{ matrix.node-version }}
            - **Workflow Run:** ${{ github.event.workflow_run.id }}

            ### Artifacts
            - `react-app-staging-${{ steps.version.outputs.version }}.tar.gz` - Compressed build (tar.gz)
            - `react-app-staging-${{ steps.version.outputs.version }}.zip` - Compressed build (zip)
            - `lt-frontend-${{ steps.version.outputs.version }}-staging-windows.exe` - **Standalone Windows executable** üöÄ
            - `staging-build-info.json` - Build metadata

            ### Testing Options

            **Option 1: Standalone Executable (Recommended for Testing)**
            - Download `lt-frontend-${{ steps.version.outputs.version }}-staging-windows.exe`
            - Run the executable to start the web server on port 8080
            - Access the application at `http://localhost:8080`
            - Perfect for local testing!

            **Option 2: Traditional Web Server**
            - Extract the tar.gz or zip archive
            - Serve the contents from any web server

            ‚ö†Ô∏è **This is a pre-release** - Not intended for production use.

            ### Testing
            Please test this build in the staging environment before promoting to production.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
