name: Staging Versioning

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.14.0]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Enable Corepack
        run: corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Restore yarn cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Lint code (if ESLint is available)
        run: |
          if yarn list eslint >/dev/null 2>&1; then
            echo "Running ESLint..."
            yarn lint || echo "Linting completed with warnings/errors"
          else
            echo "ESLint not found, skipping linting step"
          fi
        continue-on-error: true

      - name: Run tests
        run: yarn test --coverage --watchAll=false --passWithNoTests
        env:
          CI: true

      - name: Build React application
        run: yarn build
        env:
          GENERATE_SOURCEMAP: true
          CI: false
          REACT_APP_ENVIRONMENT: staging

      - name: Validate build output
        run: |
          if [ ! -d "build" ]; then
            echo "Build directory not found!"
            exit 1
          fi
          if [ ! -f "build/index.html" ]; then
            echo "index.html not found in build directory!"
            exit 1
          fi
          echo "Build validation successful"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: react-staging-build-${{ github.sha }}
          path: build/
          retention-days: 14

  create-staging-tag:
    name: Create Staging Tag
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      version: ${{ steps.tag.outputs.version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js 22.14.0
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version from package.json
        id: current-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate staging version
        id: tag
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.version }}"
          
          # Get the latest staging tag number (only match our new simplified format)
          LATEST_STAGING_TAG=$(git tag -l "v${CURRENT_VERSION}-staging-[0-9]*" --sort=-version:refname | head -n1 || echo "")
          echo "Debug: Found latest staging tag: '$LATEST_STAGING_TAG'"
          
          if [ -z "$LATEST_STAGING_TAG" ]; then
            # No previous staging tags found, start with 1
            STAGING_NUMBER=1
            echo "Debug: No staging tags found, starting with 1"
          else
            # Extract the number from the latest tag (e.g., v1.0.0-staging-5 -> 5)
            STAGING_NUMBER=$(echo "$LATEST_STAGING_TAG" | grep -o '[0-9]\+$')
            echo "Debug: Extracted number: '$STAGING_NUMBER' from tag: '$LATEST_STAGING_TAG'"
            if [ -z "$STAGING_NUMBER" ]; then
              STAGING_NUMBER=1
              echo "Debug: Could not extract number, defaulting to 1"
            else
              STAGING_NUMBER=$((STAGING_NUMBER + 1))
              echo "Debug: Incremented staging number to: $STAGING_NUMBER"
            fi
          fi
          
          STAGING_VERSION="${CURRENT_VERSION}-staging-${STAGING_NUMBER}"
          STAGING_TAG="v${STAGING_VERSION}"
          
          echo "version=$STAGING_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$STAGING_TAG" >> $GITHUB_OUTPUT
          echo "Generated staging version: $STAGING_VERSION (number: $STAGING_NUMBER)"

      - name: Update package.json with staging version
        run: |
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '${{ steps.tag.outputs.version }}';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

      - name: Commit version update
        run: |
          git add package.json
          git commit -m "chore(staging): bump version to ${{ steps.tag.outputs.version }} [skip ci]"

      - name: Create and push staging tag
        run: |
          git tag ${{ steps.tag.outputs.tag }}
          git push origin staging
          git push origin ${{ steps.tag.outputs.tag }}

      - name: Create staging pre-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Staging Release ${{ steps.tag.outputs.version }}
          draft: false
          prerelease: true
          body: |
            ## Staging Release ${{ steps.tag.outputs.version }}
            
            This is an automated staging release created from the `staging` branch.
            
            ### Build Information
            - **Version:** ${{ steps.tag.outputs.version }}
            - **Branch:** staging
            - **Commit:** ${{ github.sha }}
            - **Build Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
            
            ### Purpose
            This release is intended for staging environment testing and validation.
            
            ⚠️ **This is a pre-release** - Not intended for production use.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}