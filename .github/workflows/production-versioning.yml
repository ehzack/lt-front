name: Production Versioning

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.14.0]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Enable Corepack
        run: corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Restore yarn cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Lint code (if ESLint is available)
        run: |
          if yarn list eslint >/dev/null 2>&1; then
            echo "Running ESLint..."
            yarn lint || echo "Linting completed with warnings/errors"
          else
            echo "ESLint not found, skipping linting step"
          fi
        continue-on-error: true

      - name: Run tests
        run: yarn test --coverage --watchAll=false --passWithNoTests
        env:
          CI: true

      - name: Build React application
        run: yarn build
        env:
          GENERATE_SOURCEMAP: false
          CI: false

      - name: Validate build output
        run: |
          if [ ! -d "build" ]; then
            echo "Build directory not found!"
            exit 1
          fi
          if [ ! -f "build/index.html" ]; then
            echo "index.html not found in build directory!"
            exit 1
          fi
          echo "Build validation successful"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: react-build-${{ github.sha }}
          path: build/
          retention-days: 7

  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js 22.14.0
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0

      - name: Enable Corepack
        run: corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Restore yarn cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Install semantic-release
        run: |
          yarn add --dev semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main", "master"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              [
                "@semantic-release/npm",
                {
                  "npmPublish": false
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["package.json", "CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ]
            ]
          }
          EOF

      - name: Run semantic release
        run: yarn semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Extract new version and create tag
        run: |
          # Get the version from package.json after semantic-release
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          
          # Check if tag already exists locally
          if git tag -l "v$NEW_VERSION" | grep -q "v$NEW_VERSION"; then
            echo "Tag v$NEW_VERSION already exists locally, deleting it first"
            git tag -d "v$NEW_VERSION" || true
          fi
          
          # Create and push the version tag to trigger production-release workflow
          git tag "v$NEW_VERSION"
          git push origin "v$NEW_VERSION" --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}