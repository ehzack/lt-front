name: Production Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    name: Build and Release Production
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.14.0]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Enable Corepack
        run: corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Restore yarn cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          yarn version --new-version ${{ steps.version.outputs.version }} --no-git-tag-version

      - name: Run tests
        run: yarn test --coverage --watchAll=false --passWithNoTests
        env:
          CI: true

      - name: Build React application for production
        run: yarn build
        env:
          GENERATE_SOURCEMAP: false
          CI: false
          REACT_APP_VERSION: ${{ steps.version.outputs.version }}
          REACT_APP_ENVIRONMENT: production

      - name: Build Windows executable with embedded React app
        run: |
          echo "ðŸ”¨ Building Windows executable with embedded React app..."
          GOOS=windows GOARCH=amd64 go build \
            -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" \
            -o lt-frontend-${{ steps.version.outputs.version }}-windows.exe server.go
          echo "âœ… Windows executable built: lt-frontend-${{ steps.version.outputs.version }}-windows.exe"
        env:
          APP_VERSION: ${{ steps.version.outputs.version }}

      - name: Create production build archive
        run: |
          cd build
          tar -czf ../react-app-production-${{ steps.version.outputs.version }}.tar.gz *
          cd ..
          zip -r react-app-production-${{ steps.version.outputs.version }}.zip build/

      - name: Generate build info
        run: |
          cat > build-info.json << EOF
          {
            "version": "${{ steps.version.outputs.version }}",
            "buildDate": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commitSha": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "environment": "production",
            "nodeVersion": "${{ matrix.node-version }}"
          }
          EOF

      - name: Upload production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build-${{ steps.version.outputs.version }}
          path: |
            build/
            react-app-production-${{ steps.version.outputs.version }}.tar.gz
            react-app-production-${{ steps.version.outputs.version }}.zip
            lt-frontend-${{ steps.version.outputs.version }}-windows.exe
            build-info.json
          retention-days: 90

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Production Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            react-app-production-${{ steps.version.outputs.version }}.tar.gz
            react-app-production-${{ steps.version.outputs.version }}.zip
            lt-frontend-${{ steps.version.outputs.version }}-windows.exe
            build-info.json
          body: |
            ## Production Release ${{ steps.version.outputs.version }}
            
            ### Build Information
            - **Version:** ${{ steps.version.outputs.version }}
            - **Build Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
            - **Commit:** ${{ github.sha }}
            - **Node.js Version:** ${{ matrix.node-version }}
            
            ### Artifacts
            - `react-app-production-${{ steps.version.outputs.version }}.tar.gz` - Compressed build (tar.gz)
            - `react-app-production-${{ steps.version.outputs.version }}.zip` - Compressed build (zip)
            - `lt-frontend-${{ steps.version.outputs.version }}-windows.exe` - **Standalone Windows executable** ðŸš€
            - `build-info.json` - Build metadata
            
            ### Deployment Options
            
            **Option 1: Standalone Executable (Recommended)**
            - Download `lt-frontend-${{ steps.version.outputs.version }}-windows.exe`
            - Run the executable to start the web server on port 8080
            - Access the application at `http://localhost:8080`
            - No additional server setup required!
            
            **Option 2: Traditional Web Server**
            - Extract the tar.gz or zip archive
            - Serve the contents from any web server (nginx, Apache, etc.)
            
            ### Changes
            See the [CHANGELOG.md](./CHANGELOG.md) for detailed changes in this release.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Deploy to cloud storage or CDN
  deploy-to-s3:
    name: Deploy to AWS S3 (Optional)
    runs-on: ubuntu-latest
    needs: build-and-release
    if: ${{ vars.DEPLOY_TO_S3 == 'true' }}
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build-${{ needs.build-and-release.outputs.version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Deploy to S3
        run: |
          aws s3 sync build/ s3://${{ vars.S3_BUCKET_NAME }}/ --delete
          echo "Deployed to S3 bucket: ${{ vars.S3_BUCKET_NAME }}"

      - name: Invalidate CloudFront (if configured)
        if: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"